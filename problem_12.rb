#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

def triangle_divisor(divisor)
	step = 1
	triangle = 0
	count = 0

	while count < divisor
		count = 0
		triangle += step
		#Start counting factors for triangle
		#Only need to go up to sqrt of triangle for factors
		(1..Math.sqrt(triangle)).each do |n|
			#If a factor set, increase count by 2
			if triangle%n == 0
				unless n**2 == triangle
					count += 2
				#If a perfect square, only increase count by 1
				else
					count +=1
				end
			end
		end
		step += 1
	end
	puts triangle
end

triangle_divisor(500)
# Returns 76576500